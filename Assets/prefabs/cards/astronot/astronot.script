local cursor = require "in.cursor"
local game_manager = require "assets/modules/game_manager"

local function attach(self)
	go.set_position(vmath.vector3())

	msg.post(self.in_url, "attach")

	self.attached_url = self.in_url
end

function init(self) 
	go.property("card_type", 2)
    go.property("tutorial", false)

    self.last_frame_pos = go.get_position()
	self.can_move = true

    if not self.tutorial then
        go.animate(".", "position.y", go.PLAYBACK_ONCE_FORWARD, math.random(30, 185), go.EASING_OUTBACK, 1, 0, function ()
            sprite.play_flipbook("#sprite", hash("astronaut-idle"))
            self.last_frame_pos = go.get_position()
        end)
    else
        game_manager.tutorial = 0
    end

	--self.in_url
	--self.attached_url
    --self.timer
end

function update(self)
    -- Fix position to attached factory
	if self.attached_url and not self.can_move then
		go.set_position(go.get_position(self.attached_url))
	end
    
    -- Set animation
    local dist = go.get_position() - self.last_frame_pos
    if self.attached_url then
        sprite.play_flipbook("#sprite", hash("astronaut-working"))
    else
        if (dist.x < dist.y) then
            if (0 < dist.y) then
                sprite.play_flipbook("#sprite", hash("astronaut-drag-up"))
            else
                sprite.play_flipbook("#sprite", hash("astronaut-drag-left"))
            end
        else
            if (0 < dist.x) then
                sprite.play_flipbook("#sprite", hash("astronaut-drag-right"))
            elseif dist ~= vmath.vector3(0, 0, 0) then
                sprite.play_flipbook("#sprite", hash("astronaut-drag-down"))
            end
        end
    end

    self.last_frame_pos = go.get_position()
end

function on_message(self, message_id, message, sender)
	local other_url = msg.url(message.other_id)
	other_url.fragment = "script"

	-- If inside a factory while drag
	if message_id == hash("contact_point_response") then
		if message.other_group == hash("factory") then
            -- If not full
            if 10 > message.distance then
                self.in_url = nil
			elseif go.get(other_url, "card_type") == 1 and not go.get(other_url, "isFull") then
                if not go.get(other_url, "isFull") then
                    self.in_url = other_url
                end
			end
		end
	
	-- If detach
	elseif message_id == cursor.DRAG then
		if self.attached_url and not self.in_url then
			msg.post(self.attached_url, "detach")

			self.attached_url = nil
		end

	-- If pressed to this, let move freely
	elseif message_id == cursor.PRESSED then
        go.cancel_animations(".", "position")
		self.can_move = true
    
    elseif message_id == cursor.DRAG_START then
        if self.tutorial and game_manager.tutorial == 0 then
            go.animate("#label", "color.w", go.PLAYBACK_ONCE_FORWARD, 0, go.EASING_LINEAR, 1, 0, function ()
                if game_manager.tutorial == 1 then
                    go.animate(game_manager.tutorial_fac, "color.w", go.PLAYBACK_ONCE_FORWARD, 1, go.EASING_LINEAR, 1)
                end
            end)
            game_manager.tutorial = 1
        end
	
	-- If attach
	elseif message_id == cursor.RELEASED then
        if self.timer then
            timer.cancel(self.timer)
        end
        self.timer = timer.delay(0.5, false, function ()
            sprite.play_flipbook("#sprite", hash("astronaut-idle"))
            self.timer = false
        end)

        -- Movement
		self.can_move = false

		-- If was not attached
		if not self.attached_url and self.in_url then
			attach(self)

		-- If attached
		elseif self.in_url then
			-- Not the same
			if self.in_url ~= self.attached_url then
				msg.post(self.attached_url, "detach")

				attach(self)

			-- Same
			else
				go.set_position(go.get_position(self.attached_url))
			end
		end
	end
end

